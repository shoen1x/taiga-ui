.interactive(@ruleset) {
    // TODO switch to :is after Safari 14 and FF 78 support
    &:-webkit-any(a, button, select, textarea, input, label) {
        @ruleset();
    }

    &:-moz-any(a, button, select, textarea, input, label) {
        @ruleset();
    }
}

// centering with translate
.center-left() {
    position: absolute;
    left: 50%;
    transform: translate(-50%, 0);
}

.center-top() {
    position: absolute;
    top: 50%;
    transform: translate(0, -50%);
}

.center-all() {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

// clearfix
.clearfix() {
    &:after {
        content: '';
        display: table;
        clear: both;
    }
}

//.fullsize
.fullsize(@position: absolute, @mode: height) {
    position: @position;
    top: 0;
    left: 0;

    & when (@mode = height) {
        width: 100%;
        height: 100%;
    }

    & when (@mode = inset) {
        bottom: 0;
        right: 0;
    }
}

.clearbtn() {
    appearance: none;
    padding: 0;
    border: 0;
    background: none;
    font-size: inherit;
    line-height: inherit;
    text-decoration: none;
}

.button-base() {
    .clearbtn();
    position: relative;
    display: inline-flex;
    align-items: center;
    flex-shrink: 0;
    box-sizing: border-box;
    white-space: nowrap;
    overflow: hidden;
    vertical-align: middle;
    max-width: 100%;
    gap: calc(var(--t-gap) - 2 * var(--t-margin));

    > img,
    > tui-svg,
    > tui-icon,
    > tui-avatar,
    > tui-badge,
    > [tuiBadge],
    > [tuiRadio],
    > [tuiToggle],
    > [tuiCheckbox],
    &._icon-left:before,
    &._icon-right:after {
        margin: var(--t-margin);
    }
}

.autofill(@mode:default) {
    &:-webkit-autofill,
    &:-webkit-autofill:hover,
    &:-webkit-autofill:focus {
        caret-color: var(--tui-base-09);
        border-radius: inherit;
        color: inherit !important;
        background-color: transparent !important;

        & when (@mode = default) {
            -webkit-text-fill-color: var(--tui-text-01) !important;
            border-color: var(--tui-autofill);
            -webkit-box-shadow: 0 0 0 100rem var(--tui-autofill) inset !important; // to overlay native background
        }

        & when (@mode = dark) {
            -webkit-text-fill-color: var(--tui-text-01-night) !important;
            border-color: var(--tui-autofill-night);
            -webkit-box-shadow: 0 0 0 100rem var(--tui-autofill-night) inset !important;
        }
    }
}

.clearinput(@mode: default) {
    .autofill(@mode);
    padding: 0;
    margin: 0;
    border-width: 0;
    border-radius: inherit;
    background: none;
    font-size: inherit;
    line-height: inherit;
    font-weight: inherit;
    color: inherit;
    caret-color: currentColor;
    outline: none;
    appearance: none;
    word-break: keep-all;
    -webkit-text-fill-color: currentColor; // for Safari
}

.visually-hidden() {
    position: absolute;
    height: 1px;
    width: 1px;
    margin: -1px;
    border: 0;
    padding: 0;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    clip-path: inset(0);
}

.webkit-auto-fill-button-hidden() {
    // hide: -webkit-caps-lock-indicator
    content: none !important;

    // hide: -webkit-strong-password-auto-fill-button
    // because safari forcing set display as block
    position: absolute;
    left: -62.4375rem;
    top: -62.4375rem;
    z-index: -999;

    // hide: -webkit-contacts-auto-fill-button
    display: none !important;
    background: transparent !important;
    pointer-events: none !important;
}

// customize native scroll
.customize-scroll() {
    // exclude non-supporting browsers
    @media all and (-webkit-min-device-pixel-ratio: 0) and (min-resolution: 0.001dpcm) {
        &::-webkit-scrollbar,
        &::-webkit-scrollbar-thumb {
            width: 1rem;
            height: 1rem;
            border-radius: 6.25rem;
            background-clip: padding-box;
            border: 0.375rem solid transparent;
        }

        &::-webkit-scrollbar {
            background-color: transparent;
        }

        &::-webkit-scrollbar-thumb {
            background-color: var(--tui-clear-hover);
        }

        &::-webkit-scrollbar-thumb:hover {
            background-color: var(--tui-clear-active);
        }

        &::-webkit-scrollbar-thumb:active {
            background-color: var(--tui-text-03);
        }
    }
}

// @TODO: remove in v4.0
// shadow @deprecated
.shadow(@mode: 1) {
    // Default
    & when (@mode = 1) {
        box-shadow: var(--tui-shadow);
    }

    // Dropdown
    & when (@mode = 2) {
        box-shadow: var(--tui-shadow-dropdown);
    }

    // Modal
    & when (@mode = 3) {
        box-shadow: var(--tui-shadow-modal);
    }

    // Sidebar
    & when (@mode = 4) {
        box-shadow: var(--tui-shadow-sidebar);
    }

    // Hover
    & when (@mode = 5) {
        box-shadow: var(--tui-shadow-hover);
    }

    // Navigation
    & when (@mode = 6) {
        box-shadow: var(--tui-shadow-navigation);
    }

    // Modal mobile
    & when (@mode = 7) {
        box-shadow: var(--tui-shadow-sheet);
    }
}

.inset-border(@direction: bottom, @mode: none) {
    & when (@direction = bottom) {
        box-shadow: inset 0 -1px var(--tui-base-03);

        & when (@mode = light) {
            box-shadow: inset 0 -1px rgba(255, 255, 255, 0.24);
        }

        & when (@mode = dark) {
            box-shadow: inset 0 -1px rgba(51, 51, 51, 0.24);
        }
    }

    & when (@direction = top) {
        box-shadow: inset 0 1px var(--tui-base-03);

        & when (@mode = light) {
            box-shadow: inset 0 1px rgba(255, 255, 255, 0.24);
        }

        & when (@mode = dark) {
            box-shadow: inset 0 1px rgba(51, 51, 51, 0.24);
        }
    }

    & when (@direction = left) {
        box-shadow: inset 1px 0 var(--tui-base-03);

        & when (@mode = light) {
            box-shadow: inset 1px 0 rgba(255, 255, 255, 0.24);
        }

        & when (@mode = dark) {
            box-shadow: inset 1px 0 rgba(51, 51, 51, 0.24);
        }
    }

    & when (@direction = right) {
        box-shadow: inset -1px 0 var(--tui-base-03);

        & when (@mode = light) {
            box-shadow: inset -1px 0 rgba(255, 255, 255, 0.24);
        }

        & when (@mode = dark) {
            box-shadow: inset -1px 0 rgba(51, 51, 51, 0.24);
        }
    }
}

// transition
.transition(@param: all, @speed: var(--tui-duration, 300ms)) {
    transition-property: @param;
    transition-duration: @speed;
    transition-timing-function: ease-in-out;
}

// dashed border
.dashed-border(@color: currentColor, @alignment: bottom, @space: 4) {
    @size: unit(@space, px);
    @percentage: (100% / @space * 2);
    background-image: linear-gradient(to right, @color 0%, @color @percentage, transparent @percentage);
    background-position: 0 @alignment;
    background-size: @size 1px;
    background-repeat: repeat-x;
}

// typical opacity properties for icons
.opacity-icon() {
    opacity: 0.8;

    &:hover {
        opacity: 1;
    }
}

.hoverable-with-shadow() {
    box-shadow: var(--tui-shadow);
    .transition();
    cursor: pointer;
    transition-property: transform, box-shadow;
    will-change: transform, box-shadow;

    &:hover {
        box-shadow: var(--tui-shadow-hover);
        transform: translateY(-@space);
    }
}

// gradient
.gradient(@start-color, @end-color, @angle: 45deg) {
    background-image: linear-gradient(@angle, @start-color 0%, @end-color 100%);
}

// typical properties for text overflow with ellipsis
.text-overflow(@type: nowrap) {
    white-space: @type;
    overflow: hidden;
    text-overflow: ellipsis;
}

.text-overflow-with-fade(@color: var(--tui-base-01), @transparentColor: transparent, @width: 1.875rem) {
    position: relative;
    overflow: hidden;

    &:after {
        content: '';
        position: absolute;
        top: 0;
        right: 0;
        width: @width;
        height: 100%;
        background-image: linear-gradient(to right, @transparentColor 0%, @color 80%, @color 100%);
        pointer-events: none;
    }
}

// @deprecated use isolation: isolate instead
.createStackingContext() {
    position: relative;
    z-index: 0;
}

//spaces
.tui-space(@direction, @size) {
    & when (@direction = all) {
        margin: @space * @size;
    }

    & when (@direction = top) {
        margin-top: @space * @size;
    }

    & when (@direction = bottom) {
        margin-bottom: @space * @size;
    }

    & when (@direction = vertical) {
        margin-top: @space * @size;
        margin-bottom: @space * @size;
    }

    & when (@direction = left) {
        margin-left: @space * @size;
    }

    & when (@direction = right) {
        margin-right: @space * @size;
    }

    & when (@direction = horizontal) {
        margin-right: @space * @size;
        margin-left: @space * @size;
    }
}

.contrast-background(@background) {
    background: @background;
    color: contrast(@background, #333, #fff);
}

.blurred-background(@color: #fff) {
    background: fade(@color, 70%);
    backdrop-filter: blur(0.4375rem);
}

.scrollbar-hidden() {
    /* stylelint-disable*/
    scrollbar-width: none;
    -ms-overflow-style: none;
    /* stylelint-enable*/

    &::-webkit-scrollbar,
    &::-webkit-scrollbar-thumb {
        background: transparent;
        width: 0;
        height: 0;
    }
}

// hide an element visually without hiding it from screen readers
.sr-only() {
    position: absolute;
    clip: rect(1px, 1px, 1px, 1px);
    clip-path: inset(50%);
    height: 1px;
    width: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
}

.scroll-behavior(@mode: smooth) {
    scroll-behavior: @mode;

    :host-context(tui-root._reduced-motion) & {
        scroll-behavior: auto;
    }
}
